- content_for :head do
  = render '/locomotive/content_assets/picker'
  = render '/locomotive/theme_assets/picker'
  = render 'editable_elements'

- content_for :backbone_view_data do
  :plain
    page: #{escape_json to_json(@page)}

= f.inputs name: :information do

  = f.input :title, wrapper_html: { class: 'highlighted' }

  - if not @page.index? and not @page.not_found?
    = f.input :parent_id, as: :select, collection: parent_pages_options, include_blank: false

  = f.input :slug, required: false, hint: @page.slug.blank? ? t('.empty_slug') : public_page_url(@page, locale: current_content_locale), input_html: { :'data-url' => get_path_pages_path, disabled: @page.index? || @page.not_found? }, wrapper_html: { style: "#{'display: none' if @page.templatized? && !@page.templatized_from_parent?};", class: 'em-inline-hints' }

  - if display_page_layouts?
    = f.input :layout, as: :select, collection: options_for_page_layouts, include_blank: false

= f.inputs name: :seo, class: "inputs foldable #{'folded' if inputs_folded?(@page)}" do

  = f.input :seo_title

  = f.input :meta_keywords

  = f.input :meta_description

= f.inputs name: :advanced_options, id: 'advanced-options', class: "inputs foldable #{'folded' if inputs_folded?(@page)}" do

  - if can?(:customize, @page)
    = f.input :handle

    = f.input :is_layout, as: :'Locomotive::Toggle', input_html: { class: 'simple-toggle' }

    = f.input :allow_layout, as: :'Locomotive::Toggle', input_html: { class: 'simple-toggle' }

    = f.input :response_type, as: :select, collection: options_for_page_response_type, include_blank: false

    = f.input :templatized, as: :'Locomotive::Toggle', style: "#{'display: none' if @page.redirect? || @page.templatized_from_parent?}"

    = f.input :target_klass_name, as: :select, collection: options_for_target_klass_name, include_blank: false, wrapper_html: { style: "#{'display: none' if !@page.templatized? || @page.templatized_from_parent?}" }

  = f.input :published, as: :'Locomotive::Toggle', input_html: { class: 'simple-toggle' }

  = f.input :listed, as: :'Locomotive::Toggle', input_html: { class: 'simple-toggle' }

  = f.input :redirect, as: :'Locomotive::Toggle', wrapper_html: { style: "#{'display: none' if @page.templatized? || !@page.default_response_type?}" }

  = f.input :redirect_url, required: true, wrapper_html: { style: "#{'display: none' unless @page.redirect?}" }

  = f.input :redirect_type, as: :select, collection: options_for_page_redirect_type, include_blank: false, wrapper_html: { style: "#{'display: none' unless @page.redirect?}" }

  = render_cell 'locomotive/partials', :display, :page_form, g: f

  - if can?(:customize, @page)

    = f.input :cache_strategy, as: :select, collection: options_for_page_cache_strategy, include_blank: false, wrapper_html: { style: "#{'display: none' if @page.redirect?}" }

- if can?(:customize, @page) && @page.layout.nil?
  = f.inputs name: :raw_template, class: "inputs foldable #{'folded' if inputs_folded?(@page)}" do

    = f.input :raw_template, as: :'Locomotive::Code', main_locale_template_url: page_main_template_path(@page)


